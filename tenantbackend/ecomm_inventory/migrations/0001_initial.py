# Generated by Django 4.2.10 on 2025-04-03 13:39

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('ecomm_product', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AdjustmentReason',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('client_id', models.IntegerField(default=1)),
                ('company_id', models.IntegerField(default=1)),
                ('name', models.CharField(help_text="Short name for the reason (e.g., 'Cycle Count Discrepancy')", max_length=100)),
                ('description', models.TextField(blank=True, help_text='Optional longer description', null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Inventory Adjustment Reason',
                'verbose_name_plural': 'Inventory Adjustment Reasons',
                'ordering': ['name'],
                'unique_together': {('name', 'client_id')},
            },
        ),
        migrations.CreateModel(
            name='FulfillmentLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('client_id', models.IntegerField(default=1)),
                ('company_id', models.IntegerField(default=1)),
                ('name', models.CharField(max_length=255)),
                ('location_type', models.IntegerField(choices=[(1, 'Warehouse'), (2, 'Retail Store'), (3, 'Fulfillment Center')])),
                ('address_line_1', models.CharField(blank=True, max_length=255, null=True)),
                ('address_line_2', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('state_province', models.CharField(blank=True, max_length=100, null=True)),
                ('postal_code', models.CharField(blank=True, max_length=20, null=True)),
                ('country_code', models.CharField(blank=True, max_length=2, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Fulfillment Location',
                'verbose_name_plural': 'Fulfillment Locations',
                'ordering': ['name'],
                'unique_together': {('name', 'client_id')},
            },
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('client_id', models.IntegerField(default=1)),
                ('company_id', models.IntegerField(default=1)),
                ('stock_quantity', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('reserved_quantity', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('non_saleable_quantity', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('on_order_quantity', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('in_transit_quantity', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('returned_quantity', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('hold_quantity', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('backorder_quantity', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('low_stock_threshold', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory_levels', to='ecomm_inventory.fulfillmentlocation')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory_levels', to='ecomm_product.product')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Inventories',
                'ordering': ['product__name', 'location__name'],
                'unique_together': {('product', 'location', 'client_id')},
            },
        ),
        migrations.CreateModel(
            name='InventoryAdjustment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('client_id', models.IntegerField(default=1)),
                ('company_id', models.IntegerField(default=1)),
                ('adjustment_type', models.IntegerField(choices=[(1, 'Addition'), (2, 'Subtraction'), (3, 'Reservation'), (4, 'Release Reservation'), (5, 'Mark Non-Saleable'), (6, 'Receive Purchase Order'), (7, 'Ship Sales Order'), (8, 'Return to Stock'), (9, 'Return to Non-Saleable'), (10, 'Place on Hold'), (11, 'Release from Hold'), (12, 'Cycle Count Adjustment'), (13, 'Initial Stock Load')])),
                ('quantity_change', models.IntegerField(help_text='The change in quantity (positive for additions, negative for subtractions)')),
                ('notes', models.TextField(blank=True, help_text='Optional additional details for the adjustment', null=True)),
                ('new_stock_quantity', models.IntegerField(help_text='The stock_quantity AFTER this adjustment')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('inventory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='adjustments', to='ecomm_inventory.inventory')),
                ('reason', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='adjustments', to='ecomm_inventory.adjustmentreason')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Inventory Adjustment',
                'verbose_name_plural': 'Inventory Adjustments',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='SerializedInventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('client_id', models.IntegerField(default=1)),
                ('company_id', models.IntegerField(default=1)),
                ('serial_number', models.CharField(db_index=True, help_text='Unique serial number for this product unit', max_length=255)),
                ('status', models.IntegerField(choices=[(1, 'Available'), (2, 'Reserved (Order Pending)'), (3, 'Sold (Shipped)'), (4, 'In Transit (Transfer)'), (5, 'Returned (Pending Inspection)'), (6, 'Damaged / Non-Saleable')], db_index=True, default=1)),
                ('notes', models.TextField(blank=True, help_text='Optional notes about this serial number (e.g., damage details)', null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('inventory_record', models.ForeignKey(blank=True, help_text='Link to the main Inventory record for this product/location', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='serial_numbers', to='ecomm_inventory.inventory')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='serial_numbers', to='ecomm_inventory.fulfillmentlocation')),
                ('product', models.ForeignKey(limit_choices_to={'is_serialized': True}, on_delete=django.db.models.deletion.CASCADE, related_name='serial_numbers', to='ecomm_product.product')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Serialized Inventory Item',
                'verbose_name_plural': 'Serialized Inventory Items',
                'ordering': ['product__name', 'serial_number'],
                'indexes': [models.Index(fields=['product', 'serial_number'], name='ecomm_inven_product_cdbbee_idx'), models.Index(fields=['status', 'location'], name='ecomm_inven_status_429d5f_idx')],
                'unique_together': {('product', 'serial_number', 'client_id')},
            },
        ),
        migrations.CreateModel(
            name='Lot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('client_id', models.IntegerField(default=1)),
                ('company_id', models.IntegerField(default=1)),
                ('lot_number', models.CharField(db_index=True, help_text='Identifier for the batch/lot', max_length=100)),
                ('quantity', models.PositiveIntegerField(default=0, help_text='Quantity of this product from this lot at this location', validators=[django.core.validators.MinValueValidator(0)])),
                ('status', models.IntegerField(choices=[(1, 'Available'), (2, 'Reserved (Order Pending)'), (3, 'Expired'), (4, 'In Quarantine'), (5, 'Damaged / Non-Saleable')], db_index=True, default=1)),
                ('expiry_date', models.DateField(blank=True, db_index=True, help_text='Expiry date for this lot, if applicable', null=True)),
                ('manufacturing_date', models.DateField(blank=True, help_text='Manufacturing date for this lot', null=True)),
                ('cost_price_per_unit', models.DecimalField(blank=True, decimal_places=2, help_text='Cost price per unit for this lot', max_digits=10, null=True)),
                ('notes', models.TextField(blank=True, help_text='Optional notes about this lot', null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('inventory_record', models.ForeignKey(blank=True, help_text='Link to the main Inventory record for this product/location', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='lots', to='ecomm_inventory.inventory')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lots', to='ecomm_inventory.fulfillmentlocation')),
                ('parent_lot', models.ForeignKey(blank=True, help_text='Parent lot if this was split from another lot', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='child_lots', to='ecomm_inventory.lot')),
                ('product', models.ForeignKey(limit_choices_to={'is_lotted': True}, on_delete=django.db.models.deletion.CASCADE, related_name='lots', to='ecomm_product.product')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Inventory Lot/Batch',
                'verbose_name_plural': 'Inventory Lots/Batches',
                'ordering': ['product', 'location', 'created_at', 'expiry_date'],
                'indexes': [models.Index(fields=['product', 'lot_number'], name='ecomm_inven_product_feb6ad_idx'), models.Index(fields=['status', 'location'], name='ecomm_inven_status_cca094_idx'), models.Index(fields=['expiry_date'], name='ecomm_inven_expiry__ac62f7_idx')],
                'unique_together': {('product', 'location', 'lot_number', 'client_id', 'status')},
            },
        ),
    ]
