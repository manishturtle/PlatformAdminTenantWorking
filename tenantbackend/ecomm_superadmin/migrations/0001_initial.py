# Generated by Django 5.0.6 on 2025-04-30 07:48

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import django_tenants.postgresql_backend.base
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('subscription_plan', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Application',
            fields=[
                ('app_id', models.AutoField(primary_key=True, serialize=False)),
                ('application_name', models.CharField(max_length=100)),
                ('app_default_url', models.URLField(default='', help_text='Base URL of the application')),
                ('app_secret_key', models.CharField(default='', help_text='Secret key for API authentication', max_length=255)),
                ('app_endpoint_route', models.CharField(default='', help_text='Home route for the application', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Description of the application', null=True)),
                ('client_id', models.IntegerField(default=1, help_text='ID of the client associated with this application')),
                ('company_id', models.IntegerField(default=1, help_text='ID of the company associated with this application')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.CharField(blank=True, max_length=255, null=True)),
                ('updated_by', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'Application',
                'verbose_name_plural': 'Applications',
                'db_table': 'application',
            },
        ),
        migrations.CreateModel(
            name='CrmClient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_name', models.CharField(max_length=255)),
                ('contact_person_email', models.EmailField(max_length=255)),
                ('client_id', models.IntegerField(blank=True, help_text='ID of the client associated with this record', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.CharField(blank=True, help_text='User who created this record', max_length=255, null=True)),
                ('updated_by', models.CharField(blank=True, help_text='User who last updated this record', max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'CRM Client',
                'verbose_name_plural': 'CRM Clients',
                'db_table': 'ecomm_superadmin_crmclients',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('client_id', models.IntegerField(blank=True, help_text='ID of the client associated with this record', null=True)),
                ('created_by', models.CharField(blank=True, help_text='User who created this record', max_length=255, null=True)),
                ('updated_by', models.CharField(blank=True, help_text='User who last updated this record', max_length=255, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Tenant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('schema_name', models.CharField(db_index=True, max_length=63, unique=True, validators=[django_tenants.postgresql_backend.base._check_schema_name])),
                ('name', models.CharField(help_text='Name of the tenant/client', max_length=255)),
                ('url_suffix', models.CharField(blank=True, help_text='Custom URL suffix for this tenant (e.g., "company-name" for company-name.example.com). Only letters, numbers, and hyphens are allowed.', max_length=63, null=True, unique=True, validators=[django.core.validators.RegexValidator(code='invalid_url_suffix', message='URL suffix can only contain letters, numbers, and hyphens.', regex='^[a-zA-Z0-9-]+$')])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.CharField(blank=True, help_text='User who created this record', max_length=255, null=True)),
                ('updated_by', models.CharField(blank=True, help_text='User who last updated this record', max_length=255, null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('trial', 'Trial'), ('suspended', 'Suspended'), ('inactive', 'Inactive')], default='trial', help_text='Current status of the tenant', max_length=20)),
                ('environment', models.CharField(choices=[('development', 'Development'), ('testing', 'Testing'), ('staging', 'Staging'), ('production', 'Production')], default='production', help_text='Environment where this tenant is deployed', max_length=20)),
                ('trial_end_date', models.DateField(blank=True, help_text='Date when the trial period ends', null=True)),
                ('paid_until', models.DateField(blank=True, help_text='Date until which the subscription is paid', null=True)),
                ('tenant_admin_email', models.EmailField(blank=True, help_text='Email address of the tenant admin', max_length=255, null=True)),
                ('client', models.ForeignKey(blank=True, help_text='The CRM client associated with this tenant', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenants', to='ecomm_superadmin.crmclient')),
                ('subscription_plan', models.ForeignKey(blank=True, help_text='The subscription plan this tenant is on', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenants', to='subscription_plan.subscriptionplan')),
            ],
            options={
                'verbose_name': 'Tenant',
                'verbose_name_plural': 'Tenants',
                'db_table': 'ecomm_superadmin_tenants',
            },
        ),
        migrations.CreateModel(
            name='Domain',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain', models.CharField(db_index=True, max_length=253, unique=True)),
                ('is_primary', models.BooleanField(db_index=True, default=True)),
                ('folder', models.CharField(blank=True, help_text="Subfolder name for this tenant (e.g., 'qa' for localhost/qa/)", max_length=100, null=True)),
                ('client_id', models.IntegerField(blank=True, help_text='ID of the client associated with this record', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.CharField(blank=True, help_text='User who created this record', max_length=255, null=True)),
                ('updated_by', models.CharField(blank=True, help_text='User who last updated this record', max_length=255, null=True)),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='domains', to='ecomm_superadmin.tenant')),
            ],
            options={
                'verbose_name': 'Domain',
                'verbose_name_plural': 'Domains',
                'db_table': 'ecomm_superadmin_domain',
                'unique_together': {('domain', 'folder')},
            },
        ),
        migrations.CreateModel(
            name='TenantApplication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this application is currently active for the tenant')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.CharField(blank=True, help_text='User who created this record', max_length=255, null=True)),
                ('updated_by', models.CharField(blank=True, help_text='User who last updated this record', max_length=255, null=True)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tenant_applications', to='ecomm_superadmin.application')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tenant_applications', to='ecomm_superadmin.tenant')),
            ],
            options={
                'verbose_name': 'Tenant Application',
                'verbose_name_plural': 'Tenant Applications',
                'db_table': 'ecomm_superadmin_tenantapplication',
                'unique_together': {('tenant', 'application')},
            },
        ),
    ]
